{"version":3,"sources":["components/TodoItem.js","components/Todos.js","components/layout/header.js","components/addTodo.js","App.js","serviceWorker.js","index.js"],"names":["TodoItem","getStyle","background","padding","borderBottom","textDecoration","props","todo","completed","markComplete","e","console","log","this","id","title","style","align","type","onChange","bind","onClick","delTodo","btnStyle","React","Component","color","border","borderRadius","cursor","float","Todos","todos","map","key","headerStyle","textAlign","Header","AddTodo","display","name","placeholder","flex","value","className","App","state","setState","filter","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sPAGMA,G,iNACFC,SAAW,WACP,MAAM,CACFC,WAAY,UACZC,QAAS,MACTC,aAAc,kBACdC,eAAgB,EAAKC,MAAMC,KAAKC,UAAY,eAAiB,S,EAIrEC,aAAe,SAACC,GACZC,QAAQC,IAAI,EAAKN,Q,wEAGX,IAAD,EACeO,KAAKP,MAAMC,KAAxBO,EADF,EACEA,GAAIC,EADN,EACMA,MACX,OACI,yBAAKC,MAAOH,KAAKZ,YACb,uBAAGgB,MAAM,QACL,2BAAOC,KAAK,WACLC,SAAUN,KAAKP,MAAMG,aAAaW,KAAKP,KAAMC,KAFxD,IAEgE,IAC1DC,EACF,4BAAQM,QAASR,KAAKP,MAAMgB,QAAQF,KAAKP,KAAMC,GACvCE,MAAOO,GADf,W,GAtBGC,IAAMC,YA8BvBF,EAAW,CACbrB,WAAY,UACZwB,MAAO,OACPC,OAAQ,OACRxB,QAAS,UACTyB,aAAa,MACbC,OAAQ,UACRC,MAAM,SAQK9B,IC3BA+B,E,iLAhBD,IAAD,OACL,OAAOlB,KAAKP,MAAM0B,MAAMC,KACpB,SAAC1B,GAAD,OACI,kBAAC,EAAD,CAAU2B,IAAK3B,EAAKO,GACVP,KAAMA,EACNE,aAAc,EAAKH,MAAMG,aACzBa,QAAS,EAAKhB,MAAMgB,iB,GAP1BE,IAAMC,WCM1B,IAAMU,EAAc,CAChBjC,WAAY,OACZwB,MAAO,OACPU,UAAW,SACXjC,QAAS,QAGEkC,EAff,WACI,OACI,4BAAQrB,MAAOmB,GACX,0CCgBGG,E,iLAjBP,OACI,0BAAMtB,MAAO,CAACuB,QAAS,SACnB,2BAAOrB,KAAK,OACLsB,KAAK,QACLC,YAAY,WACZzB,MAAO,CAAC0B,KAAM,QAErB,2BAAOxB,KAAK,SACLyB,MAAM,SACNC,UAAU,MACV5B,MAAO,CAAC0B,KAAM,Y,GAZfjB,aCsDPoB,E,2MAjDbC,MAAQ,CACNd,MAAM,CACJ,CACElB,GAAI,EACJC,MAAO,4EACPP,WAAW,GAEb,CACEM,GAAI,EACJC,MAAO,qGACPP,WAAW,GAEb,CACEM,GAAI,EACJC,MAAO,2GACPP,WAAW,K,EAKjBC,aAAc,SAACK,GACb,EAAKiC,SAAS,CAAEf,MAAO,EAAKc,MAAMd,MAAMC,KAAI,SAAA1B,GAI1C,OAHIA,EAAKO,KAAOA,IACdP,EAAKC,WAAaD,EAAKC,WAElBD,Q,EAIXe,QAAU,SAACR,GACT,EAAKiC,SAAS,CAACf,MAAM,YAAK,EAAKc,MAAMd,MAAMgB,QAAO,SAAAzC,GAAI,OAAIA,EAAKO,IAAMA,S,wEAIrE,OACI,yBAAK8B,UAAU,OACb,yBAAKA,UAAU,aACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAOZ,MAAOnB,KAAKiC,MAAMd,MAClBvB,aAAcI,KAAKJ,aACnBa,QAAST,KAAKS,gB,GA1CfE,IAAMC,WCMJwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.069d538d.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\n\nclass TodoItem extends React.Component{\n    getStyle = () => {\n        return{\n            background: '#f4f4f4',\n            padding: '5px',\n            borderBottom: '1px #ccc dotted',\n            textDecoration: this.props.todo.completed ? 'line-through' : 'none'\n        }\n    };\n\n    markComplete = (e) => {\n        console.log(this.props)\n    }\n\n    render() {\n        const {id, title} = this.props.todo;\n        return (\n            <div style={this.getStyle()}>\n                <p align='left'>\n                    <input type=\"checkbox\"\n                           onChange={this.props.markComplete.bind(this, id)}/> {' '}\n                    { title }\n                    <button onClick={this.props.delTodo.bind(this, id)}\n                            style={btnStyle}>X</button>\n                </p>\n            </div>\n        );\n    }\n}\n\nconst btnStyle = {\n    background: '#ff0000',\n    color: '#fff',\n    border: 'none',\n    padding: '5px 9px',\n    borderRadius:'50%',\n    cursor: 'pointer',\n    float:'right'\n};\n\nTodoItem.propTypes = {\n    todo: PropTypes.object.isRequired\n};\n\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from \"./TodoItem\";\nimport PropTypes from 'prop-types'\n\nclass Todos extends React.Component{\n    render() {\n        return this.props.todos.map(\n            (todo) => (\n                <TodoItem key={todo.id}\n                          todo={todo}\n                          markComplete={this.props.markComplete}\n                          delTodo={this.props.delTodo}\n                />\n        ));\n    }\n}\n\nTodos.propTypes = {\n    todos: PropTypes.array.isRequired\n}\n\nexport default Todos;\n","import React from 'react';\n\nfunction Header() {\n    return (\n        <header style={headerStyle}>\n            <h1>TodoList</h1>\n        </header>\n    )\n}\n\nconst headerStyle = {\n    background: '#333',\n    color: '#fff',\n    textAlign: 'center',\n    padding: '10px',\n}\n\nexport default Header;","import React, {Component} from 'react';\n\nclass AddTodo extends Component {\n    render() {\n        return (\n            <form style={{display: 'flex'}}>\n                <input type='text'\n                       name='title'\n                       placeholder='Add todo'\n                       style={{flex: '10'}}\n                />\n                <input type='submit'\n                       value='Submit'\n                       className='btm'\n                       style={{flex: '1'}}\n                />\n            </form>\n        );\n    }\n}\n\nexport default AddTodo;","import React from 'react';\nimport './App.css';\nimport Todos from './components/Todos'\nimport Header from \"./components/layout/header\";\nimport AddTodo from \"./components/addTodo\";\n\nclass App extends React.Component{\n  state = {\n    todos:[\n      {\n        id: 1,\n        title: 'Вынести мусор',\n        completed: false,\n      },\n      {\n        id: 2,\n        title: 'Встреча с друзьями',\n        completed: true,\n      },\n      {\n        id: 3,\n        title: 'Совещание на работе',\n        completed: false,\n      },\n    ]\n  };\n  // Toggle complete\n  markComplete =(id) => {\n    this.setState({ todos: this.state.todos.map(todo =>{\n      if (todo.id === id) {\n        todo.completed = !todo.completed;\n      }\n      return todo;\n      }) });\n  };\n\n  delTodo = (id) => {\n    this.setState({todos: [...this.state.todos.filter(todo => todo.id != id)]});\n  }\n\n  render() {\n    return (\n        <div className=\"App\">\n          <div className=\"container\">\n            <Header/>\n            <AddTodo/>\n            <Todos todos={this.state.todos}\n                   markComplete={this.markComplete}\n                   delTodo={this.delTodo}\n            />\n          </div>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}